# Version de la syntaxe Docker Compose
version: '3.8'

# Définition des services (conteneurs)
services:
  # Service pour la base de données PostgreSQL
  db:
    image: postgres:15-alpine  # Utilise une image PostgreSQL officielle et légère
    container_name: mon_projet_db
    env_file:
      - .env
    environment:
      # Ces variables sont utilisées par l'image Postgres pour initialiser la base.
      # Assurez-vous qu'elles correspondent à celles dans votre fichier .env !
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: dbname
    volumes:
      # Ce volume rend les données de la base de données persistantes.
      # Même si vous supprimez le conteneur, les données seront conservées.
      - postgres_data:/var/lib/postgresql/data
    expose:
      # Rend le port accessible aux autres services du réseau Docker uniquement (non publié vers l'hôte)
      - "5432"
    restart: unless-stopped # Redémarre le conteneur sauf s'il a été arrêté manuellement
    networks:
      - internal_net

  # Service Redis pour la file d'attente et le cache
  redis:
    image: redis:7-alpine
    container_name: mon_projet_redis
    volumes:
      - redis_data:/data
    restart: unless-stopped
    expose:
      # Rend le port accessible aux autres services du réseau Docker uniquement (non publié vers l'hôte)
      - "6379"
    networks:
      - internal_net

  # Service pour votre application (backend + frontend)
  app:
    # Construit l'image à partir du Dockerfile dans le répertoire courant (.)
    build: .
    container_name: mon_projet_app
    ports:
      # Mappe le port 8000 de votre machine au port 8000 du conteneur.
      - "8000:8000"
    env_file:
      # Injecte les variables d'environnement depuis le fichier .env
      - .env
    depends_on:
      # S'assure que le service 'db' est démarré avant le service 'app'.
      - db
      - redis
    restart: unless-stopped
    networks:
      # Connecté au réseau interne pour parler à db/redis, et au réseau public pour être accessible depuis l'hôte
      - internal_net
      - public_net

  # Service worker ARQ pour exécuter les tâches
  worker:
    build: .
    container_name: mon_projet_worker
    command: ["arq", "src.worker.main.WorkerSettings"]
    env_file:
      - .env
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - internal_net
      - public_net

# Définition des volumes nommés
volumes:
  postgres_data: # Le volume pour les données de la base de données
  redis_data: # Le volume pour les données Redis

# Définition des réseaux
networks:
  # Réseau interne isolé du monde extérieur
  internal_net:
    internal: true
  # Réseau non-interne pour exposer l'application vers l'hôte
  public_net:
